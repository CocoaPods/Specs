{
  "name": "Faro",
  "version": "0.5.13",
  "summary": "Faro defines the contract to fetch data from an asynchronous source that can be mapped any model object.",
  "description": "__Faro__ is a service layer build in Swift by using generics. Its main starting point is the class `Air`. The idea is that you have `Air` which is a class that performs the request for an `Environment`. To do this it needs a Type called `Rivet` that can be handeled over the `Air` ðŸ¤”. So how do we make this `Rivet` Type?\n\n`Any model object` can be a `Rivet` if they are `Rivetable`. `Rivetable` is a combination of protocols that the Rivet (Type) has to conform to. The `Rivet` is `Rivetable` if:\n\n- `Mitigatable` -> Receive requests to make anything that can go wrong less severe.\n- `Parsable` -> You get Dictionaries that you use to set the variables\n- `EnvironmentConfigurable` -> We could get the data over the `Air` from a _production_ or a _development_ environment\n- There is also a special case where the environment is `Mockable` then your request are loaded from local files _(dummy files)_\n- `UniqueAble` -> If your `AnyThing` is in a _collection_ you can find your entity by complying to `UniqueAble`\n\nIf you do the above (there are default implementation provided in the example).",
  "license": "MIT",
  "homepage": "https://github.com/icapps/ios-air-rivet",
  "authors": {
    "Leroy Jenkins": "development@icapps.com"
  },
  "source": {
    "git": "https://github.com/icapps/ios-air-rivet.git",
    "tag": "0.5.13"
  },
  "social_media_url": "https://twitter.com/icapps",
  "platforms": {
    "ios": "8.0",
    "osx": "10.10",
    "tvos": "9.0",
    "watchos": "2.0"
  },
  "requires_arc": true,
  "source_files": "Sources/**/*"
}
