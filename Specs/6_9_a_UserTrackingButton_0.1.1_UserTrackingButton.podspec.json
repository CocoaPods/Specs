{
  "name": "UserTrackingButton",
  "version": "0.1.1",
  "summary": "A replacement for MKUserTrackingBarButtonItem",
  "description": "# UserTrackingButton\n\nA replacement for `MKUserTrackingBarButtonItem` when you don't have toolbars or navigation bars.\n\n `UserTrackingButton` is a button that works in conjunction with `MKMapView`. Unlike `MKUserTrackingBarButtonItem` it can be used even when you don't have toolbars or navigation bars.\n \n## Installation\n\n#### Carthage\n\nAdd `github \"mkko/UserTrackingButton\" ~> 0.1` to you `Cartfile`. Follow the further instrcutions on [Carthage getting started][1] page.\n\n*NB: There is a bug with `@IBDesignable` when using external frameworks that prevents the view from rendering wihtin Interface Builder. Further reading can be found [here][2].*\n\n#### Cocoapods\n\nAdd `pod 'UserTrackingButton', '~> 0.1'` to you `Podfile` and run `pod install`.\n\n## Setup\n\nTo use UserTrackingButton from Interface Builder simply subclass a `UIView` component and set its class to `UserTrackingButton`. Connect the `mapView` outlet and you're done.\n\nThe same steps are required when adding the button in code:\n\n```\nlet btn = UserTrackingButton(frame: trackingButtonFrame)\nbtn.mapView = self.mapView\nself.view.addSubview(btn)\n```\nAnd there, you're done. The button handles the binding to user tracking state of the `MKMapView` instance.\n\n\n[1]: https://github.com/Carthage/Carthage#if-youre-building-for-ios\n[2]: https://openradar.appspot.com/23114017",
  "homepage": "https://github.com/mkko/UserTrackingButton.git",
  "license": {
    "type": "MIT",
    "file": "LICENSE"
  },
  "authors": {
    "Mikko Välimäki": "mkko1373@gmail.com"
  },
  "social_media_url": "http://twitter.com/mkko",
  "platforms": {
    "ios": "8.0"
  },
  "source": {
    "git": "https://github.com/mkko/UserTrackingButton.git",
    "tag": "0.1.1"
  },
  "source_files": "UserTrackingButton/*.{swift,h,m}",
  "resources": "UserTrackingButton/Media.xcassets",
  "requires_arc": true
}
