{
  "name": "Promise",
  "version": "1.2",
  "summary": "An Object Oriented easy and lightweight way of running asynchronous code.",
  "description": "Promise allows you to run asynchronous code. As Promise is object oriented, it lets you get the returned value (if some) at any point in code that you wish.\n\nPromise is thread-safe.\n\nPromise lets you chain many asynchronous blocks of code, making them serial. If you wish, you can pass the value returned by the previous chained task to the next.\n\nPromise lets you handle errors at any point in the chain that you wish, if you wish. As the Promise tasks are throwable blocks, you are free to use the magic of swift 'try' statement. Once an error is thrown, the error the next Promises are cancelled, and the error is handled at any point in the chain that you wish (for example, a simple single error handler at the end of the chain).\n\nHowever if what you wish is to run many asynchronous tasks concurrently, Promise also lets you do that. And if you wish, you can handle the error as well.\n\nSince Promise is object oriented, this could be your method return type; or you can subclass it; you can adapt it to your own needs.\n\nAll made very simple and intuitive.",
  "homepage": "https://github.com/movinpixel/Promise",
  "license": "BSD",
  "authors": {
    "Movinpixel": "julio@movinpixel.com"
  },
  "platforms": {
    "ios": "8.0",
    "osx": "10.9",
    "watchos": "2.0",
    "tvos": "9.0"
  },
  "source": {
    "git": "https://github.com/movinpixel/Promise.git",
    "tag": "1.2"
  },
  "source_files": [
    "Pod",
    "Pod/Promise.swift"
  ],
  "requires_arc": true,
  "deprecated": true
}
