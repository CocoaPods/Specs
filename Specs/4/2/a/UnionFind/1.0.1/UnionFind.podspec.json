{
  "name": "UnionFind",
  "version": "1.0.1",
  "summary": "A union find / disjoint set data structure.",
  "description": "                   Implements a union find / disjoint set data structure for efficiently\n                   determining if two objects belong to the same set, and combining those\n                   sets together, as part of larger algorithms.\n                   \n                   Instructions:\n                   * #import \"UnionFind.h\"\n                   * Place a 'UFDisjointSetNode *' field on objects you want to put in implicit mergeable sets.\n                   * Initialize the field with '[UFDisjointSetNode new]'.\n                   * Use '[obj1.nodeField unionWith:obj2.nodeField]' to merge sets.\n                   * Use '[obj1.nodeField isInSameSetAs:obj2.nodeField]' to determine if two objects are in the same set.\n",
  "homepage": "https://github.com/Strilanc/UnionFind-ObjC",
  "license": {
    "type": "Unlicense",
    "file": "LICENSE"
  },
  "authors": {
    "Craig Gidney": "craig.gidney@gmail.com"
  },
  "source": {
    "git": "https://github.com/Strilanc/UnionFind-ObjC.git",
    "tag": "v1.0.1"
  },
  "source_files": [
    "src",
    "src/**/*.{h,m}"
  ],
  "requires_arc": true
}
