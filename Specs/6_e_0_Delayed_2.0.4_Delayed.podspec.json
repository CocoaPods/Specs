{
  "name": "Delayed",
  "version": "2.0.4",
  "summary": "Timers made easy. (debounce, idle, watchdog and more!)",
  "description": "Delayed is a NSTimer manager offering 4 modes through a unified api. Delayed takes care of the involved implementation of NSTimers while ensuring a proper memory management with no extra effort:\n\nDelayed.debounce: Calls immediatly and reject calls until time out elapses\nDelayed.debounceLast: As debounce but also performs the last call after time out\nDelayed.idle: Performs the last call after not being called during the timeout interval\nDelayed.watchdog: As idle but allowing to be canceled with watchDogCancel\nWhy Delayed?\n\nInstead of returning a timer object, Delayed manages the Timer instances internally through a [DelayedKey : Timer] dictionary. This makes easy to call Delayed from distant components or threads accesing the timers by their key value.\n\nThe DelayedKey can be etiher a String struct or AnyObject instance. If an object is passed the key is inferred from the object's pointer. Calling the methods with the same key causes all timer modes to be reset.\n\nAs the intention is to facilitate calling Delayed from distant implementations you can optional pass a context value ctx. A context can be Any struct or class instance and it's internally wrapped with a weak reference to prevent retain cycles. The context is then optionally passed to the timeOut closure.",
  "homepage": "https://github.com/eonfluxor/kron",
  "license": "MIT",
  "authors": {
    "Eonflux - Hassan  Uriostegui": "eonflux@gmail.com"
  },
  "social_media_url": "http://twitter.com/eonfluxor",
  "platforms": {
    "ios": "9.0",
    "osx": "10.9",
    "tvos": "9.0"
  },
  "source": {
    "git": "https://github.com/eonfluxor/delayed.git",
    "tag": "v2.0.4"
  },
  "source_files": "Delayed/Sources/**/*.swift",
  "swift_version": "4.1"
}
