{
  "name": "SimpleJSON",
  "version": "0.1.0",
  "summary": "A very easy and lightweight JSON library for Swift.",
  "description": "Heavily inspired by JSONHelper, I really liked their awesome library but there\nwere a few things that I didn't like in their implementation which inspired me\nto make this library.\n1. You don't always get the perfect JSON, sometimes you should gracefully fail \n   to deserialize a JSON string to a type which is why Deserializable has an\n   optional initializer, you can return nil if the given dictionary does not \n   provide enough information to initialize.\n\n2. To make it easiert to understand, think of operator --> as Swift operator 'as?'.\n   Same way as ```var myNumber = someObject as? myNumber``` you can use\n   ```var numbers = \"[1, 2, 3, 4] as [Int].self\" you just have to feed a type to\n   --> operator. Left hand side can be string, data or an object and right hand\n   side is a type that you want to TRY to read as. My suggestion best practice is\n   to use if let and guard let. for example:\n   if let numbers = \"[1, 2, 3, 4] as? [Int].self { print(numbers) }\"\n\n3. Dates, URLs and other types are not supported. My philosophy is that these types\n   are formatted differently API to API so I recommend casting them manually.\n   I plan to include custom deserializer so you can install date deserializer based on\n   your own need. This deserializer is going to be faster and easier.",
  "homepage": "https://github.com/peymanmortazavi/SimpleJSON",
  "license": {
    "type": "MIT",
    "file": "LICENSE"
  },
  "authors": {
    "Peyman Mortazavi": "pey.mortazavi@gmail.com"
  },
  "source": {
    "git": "https://github.com/peymanmortazavi/SimpleJSON.git",
    "tag": "0.1.0"
  },
  "platforms": {
    "ios": "8.0"
  },
  "source_files": "SimpleJSON/Classes/**/*"
}
