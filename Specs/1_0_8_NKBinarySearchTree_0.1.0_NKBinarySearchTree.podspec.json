{
  "name": "NKBinarySearchTree",
  "version": "0.1.0",
  "summary": "Binary Search Tree Swift implementation",
  "description": "A binary search tree is a rooted binary tree, whose internal nodes each store a key (and optionally, an associated value) and each have two distinguished sub-trees, commonly denoted left and right. The tree additionally satisfies the binary search tree property, which states that the key in each node must be greater than or equal to any key stored in the left sub-tree, and less than or equal to any key stored in the right sub-tree. (The leaves (final nodes) of the tree contain no key and have no structure to distinguish them from one another. Leaves are commonly represented by a special leaf or nil symbol, a NULL pointer, etc.)\nThis is implementation of algorithm from `Algorithhms 4th Edition` by Robert Sedgewick.",
  "homepage": "https://github.com/NickKibish/BinarySearchTree",
  "license": {
    "type": "MIT",
    "file": "LICENSE"
  },
  "authors": {
    "Mykola Kibysh": "mykola.kibysh@ticketmaster.com"
  },
  "source": {
    "git": "https://github.com/NickKibish/BinarySearchTree.git",
    "tag": "0.1.0"
  },
  "platforms": {
    "ios": "8.0"
  },
  "source_files": "NKBinarySearchTree/**/*",
  "dependencies": {
    "NKQueue": [

    ]
  },
  "pushed_with_swift_version": "3.0"
}
