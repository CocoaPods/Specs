{
  "name": "MJDijkstra",
  "version": "1.0.0",
  "summary": "An implementation of Dijkstra algorithm in Objective C",
  "platforms": {
    "ios": "6.0",
    "osx": "10.8"
  },
  "description": "Dijkstra algorithm finds all shortest paths from a vertex to each other vertex in a graph.\n\nThe input graph G is assumed to have the following representation: A vertex can be any object that can be used as an index into a dictionary. G is a dictionary, indexed by vertices. For any vertex v, G[v] is itself a dictionary, indexed by the neighbors of v. For any edge v->w, G[v][w] is the length of the edge.\n\nThis code is a port of a Python implementation of Dijkstra algorithm suggested by David Eppstein.\n\nSee http://code.activestate.com/recipes/119466-dijkstras-algorithm-for-shortest-paths/?in=user-218935\n\nIt also provides an implementation of a priority dictionary: a key value map which is also ordered by values.\n\nThe implementation relies on C++ stl. stl::map and stl::make_heap do most of heavy lifting. New feature of clang is used to keep C++ out of Objective-C headers: ivars in class extensions.\n\nThe project incliudes unit tests.",
  "homepage": "https://github.com/SSU-CS-Department/MJDijkstra",
  "license": {
    "type": "MIT",
    "text": "        MJDijkstra\n        \n        Author: Dmitri Kozlov\n        \n        This is free and unencumbered software released into the public domain.\n        \n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "authors": "Dmitri Kozlov",
  "source": {
    "git": "https://github.com/SSU-CS-Department/MJDijkstra.git",
    "tag": "1.0.0"
  },
  "source_files": [
    "MJDijkstra/Classes",
    "MJDijkstra/Classes/**/*.{h,m,mm}"
  ],
  "libraries": "c++",
  "requires_arc": true
}
