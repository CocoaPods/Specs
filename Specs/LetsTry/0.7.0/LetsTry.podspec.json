{
  "name": "LetsTry",
  "version": "0.7.0",
  "summary": "Try type for wrapping Swift error handling with let-binding (same as Optional).",
  "description": "The current way of error handling in Swift has two problems:\n1. The dance of `do`, `try` and `catch` blocks is performed with lots of boilerplate that hurts readability.\n2. The composition of multiple code units that `throws` is non-straightforward.\n\nLet'sTry solves both problems by providing a trio of types for error handling simplification: Try, TryLazy and TryTyped. They are designed with composition in mind (inspired by monadic types) and encapsulate the `do`-`try`-`catch` boilerplate. They can also be used in let-binding statements just like Optional type, which makes using them a pleasure:\n\n```\nlet tried = Try { try throwingMethod() }\n\nif let succeeded = tried { ... }\n\nguard let succeeded = tried else { print(\"failed\"); return }\n```",
  "homepage": "https://github.com/siejkowski/LetsTry",
  "license": {
    "type": "MIT",
    "file": "LICENSE.md"
  },
  "authors": "Krzysztof Siejkowski",
  "social_media_url": "http://twitter.com/_siejkowski",
  "platforms": {
    "ios": "8.0",
    "osx": "10.11",
    "watchos": "2.0",
    "tvos": "9.0"
  },
  "source": {
    "git": "https://github.com/siejkowski/LetsTry.git",
    "tag": "0.7.0"
  },
  "source_files": "Sources/**/*.swift",
  "requires_arc": true
}
