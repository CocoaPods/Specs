{
  "name": "Kekka",
  "version": "0.7.1",
  "summary": "Kekka (結果) means Result. This small framework is inspired from Haskell's monadic types.",
  "description": "This is a small framework with fundamental types like Result and Future\nwhich are expressed in pure functional way. This work is inspired by \nhaskell implementation of monad and its properties. Everything is based on \nfundamental reasoning.\n\n- Result<T> is a complete Functor and Monad. It is a contextual type over\na computation that can pass or fail.\n\n- Future<T> (analogous to Promise) is a complete Functor and Monad too. It \nabstracts over nested callback and asynchronous API whereby enabling client \nto focus as if the completion is given as soon as it is executed.",
  "homepage": "https://github.com/kandelvijaya/Kekka.git",
  "license": "MIT",
  "authors": {
    "kandelvijaya": "kandelvijaya@gmail.com"
  },
  "social_media_url": "http://twitter.com/kandelvijaya",
  "platforms": {
    "ios": "9.0"
  },
  "source": {
    "git": "https://github.com/kandelvijaya/Kekka.git",
    "tag": "0.7.1"
  },
  "source_files": "Kekka/Classes/**/*",
  "pod_target_xcconfig": {
    "SWIFT_VERSION": "4"
  }
}
