{
  "name": "BCryptSwift",
  "version": "1.0",
  "summary": "BCryptSwift is an implementation of bcrypt written in Swift.",
  "description": "It currently is able to generate the salt and hash a phrase using a generated salt.\n```\nBCryptSwift.generateSaltWithNumberOfRounds(rounds: UInt) -> String\nBCryptSwift.generateSalt() -> String\nBCryptSwift.hashPassword(password: String, withSalt salt: String) -> String?\nBCryptSwift.verifyPassword(password: String, matchesHash hash: String) -> Bool?\n```\n\nThe `generateSaltWithNumberOfRounds()` class function will generate a random salt using the number of rounds provided. The number of rounds must be between 4 and 31 inclusively.\n\nThe `generateSalt()` class convenience function will generate a random salt using a default 10 rounds. This number can be adjusted based on your specific needs.\n\nThe `hashPassword(withSalt:)` class function will hash the password phrase using the salt. If there is an issue during processing, nil will be returned. Check the function documentation for details.\n\nThe `verifyPassword(matchesHash:)` class convenience function will hash the password phrase using the hash, then return the comparison between the new hash and the given hash. If there is an issue during processing, nil will be returned. Check the function documentation for details.",
  "homepage": "https://github.com/felipeflorencio/BCryptSwift",
  "license": {
    "type": "Apache 2.0 License",
    "file": "LICENSE"
  },
  "authors": {
    "felipeflorencio": "felipeflorencio@me.com"
  },
  "source": {
    "git": "https://github.com/felipeflorencio/BCryptSwift.git",
    "tag": "1.0"
  },
  "social_media_url": "https://twitter.com/dr_nerd",
  "platforms": {
    "ios": "9.0"
  },
  "source_files": "BCryptSwift/Classes/**/*",
  "pushed_with_swift_version": "4.0"
}
