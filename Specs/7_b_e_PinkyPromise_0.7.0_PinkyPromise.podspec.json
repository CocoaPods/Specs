{
  "name": "PinkyPromise",
  "version": "0.7.0",
  "summary": "A tiny Promises library.",
  "description": "PinkyPromise is a lightweight tool for coordinating asynchronous code.\n\nIt consists mainly of a Promise type, which represents a task,\nand a Result type, which represents success or failure.\nThese are immutable values that can be transformed in functional style.\n\nResult encodes the return-or-throw pattern common in synchronous code\nsuch that asynchronous completion blocks can use that pattern,\nwith a much tighter contract than (AnyObject?, ErrorType?) -> Void.\n\nPromise separates the events of creating an asynchronous operation with\narguments, and starting it with a completion block. Since it is a value,\nyou can add more steps by making composite Promises.\n\nPinkyPromise is worth using if you don't want a complex framework\nor if you're just getting started with functional patterns.\nA suitable step up from PinkyPromise is RxSwift's Observables.",
  "homepage": "https://github.com/willowtreeapps/PinkyPromise",
  "license": {
    "type": "MIT",
    "file": "LICENSE"
  },
  "authors": {
    "Kevin Conner": "connerk@gmail.com"
  },
  "social_media_url": "https://twitter.com/connerk",
  "platforms": {
    "ios": "8.0",
    "osx": "10.10",
    "tvos": "9.0"
  },
  "source": {
    "git": "https://github.com/willowtreeapps/PinkyPromise.git",
    "tag": "0.7.0"
  },
  "source_files": [
    "Sources",
    "Sources/**/*.{swift}"
  ],
  "swift_versions": "5.0",
  "swift_version": "5.0"
}
