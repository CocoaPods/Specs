{
  "name": "ConstraintFormatter",
  "version": "0.1.0",
  "summary": "A library to unify visual constraints and constraints based on attributes for Auto Layout",
  "description": "  It's really verbose to write NSLayoutConstraints based on attributes and with this library you can easily write and mix them with visual constraints. Something like this:\n\n  ```objc\n  id views = @{@\"view1\": view1, @\"view2\": view2};\n  id metrics = @{@\"margin\": @(10)};\n  id formats = @[@\"view1.bottom == view2.top + margin\",\n                 @\"H:|-margin-[view1]-margin-|\",\n                 @\"H:|[view2]|\"];\n  \n  [view addConstraintsWithFormats:formats\n                            views:views\n                          metrics:metrics];\n  ```\n",
  "homepage": "https://github.com/greis/ConstraintFormatter",
  "license": "MIT",
  "authors": {
    "Gabriel Reis": "gabriel.oreis@gmail.com"
  },
  "platforms": {
    "ios": "6.0"
  },
  "source": {
    "git": "https://github.com/greis/ConstraintFormatter.git",
    "tag": "0.1.0"
  },
  "source_files": [
    "Classes",
    "Classes/**/*.{h,m}"
  ],
  "exclude_files": "Classes/Exclude",
  "requires_arc": true,
  "dependencies": {
    "RegexKitLite": [
      "~> 4.0"
    ]
  }
}